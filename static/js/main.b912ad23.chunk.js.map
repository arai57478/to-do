{"version":3,"sources":["features/todosection.js","components/input.js","components/Todoitem.js","components/Header.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["todosection","createSlice","name","initialState","todolist","reducers","saveTodo","state","action","push","payload","setCheck","map","item","id","done","actions","selectTodolist","todo","Input","useState","input","setinput","dispatch","useDispatch","className","type","value","onChange","e","target","placeholder","onClick","Date","now","Todoitem","Checkbox","checked","color","inputProps","Header","App","useSelector","store","configureStore","reducer","todoReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oSAMMA,EAAcC,YAAY,CAC5BC,KAAM,OACNC,aANiB,CACnBC,SAAS,IAMPC,SAAU,CACPC,SAAS,SAACC,EAAMC,GACZD,EAAMH,SAASK,KAAKD,EAAOE,UAE/BC,SAAS,SAACJ,EAAMC,GACZD,EAAMH,SAASQ,KAAI,SAAAC,GACZL,EAAOE,UAAUG,EAAKC,MACN,IAAZD,EAAKE,KACJF,EAAKE,MAAK,EAEdF,EAAKE,MAAK,UAOtB,EAA4Bf,EAAYgB,QAAjCV,EAAP,EAAOA,SAASK,EAAhB,EAAgBA,SACVM,EAAgB,SAAAV,GAAK,OAAEA,EAAMW,KAAKd,UAChCJ,IAAf,Q,OCLemB,EAnBH,WACR,MAAuBC,mBAAS,IAAhC,mBAAOC,EAAP,KAAaC,EAAb,KACMC,EAAWC,cASjB,OACI,sBAAKC,UAAU,QAAf,UACA,uBAAOC,KAAK,OAAOC,MAAON,EAAOO,SAAU,SAAAC,GAAC,OAAEP,EAASO,EAAEC,OAAOH,QAAQI,YAAY,yBACpF,wBAAQC,QAXE,WACVT,EAASjB,EAAS,CACfO,KAAMQ,EACNN,MAAK,EACLD,GAAGmB,KAAKC,SAEXZ,EAAS,KAKT,qB,gBCIOa,EAjBA,SAAC,GAAkB,IAAjBjC,EAAgB,EAAhBA,KAAKa,EAAW,EAAXA,KAAKD,EAAM,EAANA,GACjBS,EAASC,cAIf,OACI,sBAAKC,UAAU,WAAf,UACE,cAACW,EAAA,EAAD,CACFC,QAAStB,EACTuB,MAAM,UACNV,SARe,WACfL,EAASZ,EAASG,KAQlByB,WAAY,CAAE,aAAc,wBAE1B,mBAAGd,UAAWV,GAAQ,iBAAtB,SAAyCb,Q,iBCVpCsC,G,MALF,WACV,OAAO,iCACF,+BAAI,cAAC,IAAD,IAAJ,oBC2BOC,MAxBf,WACE,IAAMrC,EAASsC,YAAYzB,GAC3B,OAEE,sBAAKQ,UAAU,MAAf,UACA,cAAC,EAAD,IACA,sBAAKA,UAAU,gBAAf,UACE,qBAAKA,UAAU,oBAAf,SAEIrB,EAASQ,KAAI,SAAAC,GAAI,OACjB,cAAC,EAAD,CACEX,KAAMW,EAAKA,KACXE,KAAMF,EAAKE,KACXD,GAAID,EAAKC,UAKhB,cAAC,EAAD,WCvBQ6B,EAAQC,YAAe,CAClCC,QAAQ,CACN3B,KAAK4B,KCOWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUX,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJY,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAACC,GAClCA,EAAaC,kB","file":"static/js/main.b912ad23.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\r\n\r\nconst initialState = {\r\n  todolist:[]\r\n}\r\n\r\nconst todosection = createSlice({\r\n    name: \"todo\",\r\n    initialState,\r\n    reducers: {\r\n       saveTodo:(state,action)=>{\r\n           state.todolist.push(action.payload )\r\n       },\r\n       setCheck:(state,action)=>{\r\n           state.todolist.map(item=>{\r\n               if(action.payload===item.id){\r\n                   if(item.done===true){\r\n                       item.done=false\r\n                   }else\r\n                   item.done=true\r\n               }\r\n           })\r\n       }\r\n    }\r\n});\r\n\r\nexport const {saveTodo,setCheck} = todosection.actions\r\nexport const selectTodolist =state=>state.todo.todolist\r\nexport default todosection.reducer","import React, { useState } from \"react\";\r\nimport \"./Input.css\";\r\n import { useDispatch } from \"react-redux\";\r\n import {saveTodo }from \"../features/todosection\";\r\nconst Input=()=>{\r\n    const [input,setinput]=useState('')\r\n    const dispatch = useDispatch()\r\n    const addtodo=()=>{\r\n        dispatch(saveTodo({\r\n           item: input,\r\n           done:false,\r\n           id:Date.now()\r\n        }))\r\n        setinput(\"\")\r\n    }\r\n    return (\r\n        <div className=\"input\">\r\n        <input type=\"text\" value={input} onChange={e=>setinput(e.target.value)} placeholder=\"add new item in list\"/>\r\n        <button onClick={addtodo}>Add</button>\r\n        </div>\r\n       \r\n    )\r\n}\r\nexport default Input;","import React from \"react\";\r\nimport './Todoitem.css';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport { useDispatch } from \"react-redux\";\r\nimport { setCheck} from '../features/todosection';\r\nconst Todoitem=({name,done,id})=>{\r\n    const dispatch=useDispatch()\r\n    const handleChange=()=>{\r\n        dispatch(setCheck(id))\r\n    }\r\n    return (\r\n        <div className='todoitem'>\r\n          <Checkbox\r\n        checked={done}\r\n        color=\"primary\"\r\n        onChange={handleChange}\r\n        inputProps={{ 'aria-label': 'secondary checkbox' }}\r\n      />\r\n          <p className={done && \"todoitem--done\"}>{name}</p>\r\n        </div>\r\n    )\r\n}\r\nexport default Todoitem","import React from \"react\";\r\nimport HighlightIcon from '@material-ui/icons/Highlight';\r\nimport './Header.css';\r\nconst Header=()=>{\r\n   return <header>\r\n        <h1><HighlightIcon />TO-DO List</h1>\r\n        </header>;\r\n}\r\nexport default Header;","import React from 'react';\nimport './App.css';\nimport Input from './components/input';\nimport Todoitem from \"./components/Todoitem\";\nimport Header from './components/Header'\nimport { useSelector } from 'react-redux';\nimport {selectTodolist} from './features/todosection'\n\nfunction App() {\n  const todolist=useSelector(selectTodolist)\n  return (\n   \n    <div className=\"App\">\n    <Header />\n    <div className=\"app_container\">\n      <div className=\"app_todocontainer\">\n      \n        { todolist.map(item =>(\n          <Todoitem \n            name={item.item}\n            done={item.done}\n            id={item.id}\n          />\n        ))}\n      </div>\n    \n     <Input />\n    </div>\n      </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\nimport todoReducer from \"../features/todosection\"\n\nexport const store = configureStore({\n  reducer:{\n    todo:todoReducer\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}